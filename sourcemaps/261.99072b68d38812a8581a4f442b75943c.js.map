{"version":3,"file":"js/261.1693405352952.fb868e73b63bd33f4fef.js","mappings":"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","sources":["webpack:///./src/routes/Routing.tsx","webpack:///./src/components/RegistrationModal/FooterButton.tsx","webpack:///./src/components/RegistrationModal/RegistrationModal.tsx","webpack:///./src/utils/const.ts","webpack:///./src/components/RegistrationProvider.tsx","webpack:///./src/hooks/useRecaptcha.ts","webpack:///./src/App.tsx","webpack:///./src/components/AnalyticsButton/AnalyticsButton.tsx","webpack:///./src/hooks/useTrackEvent.ts","webpack:///./src/services/axios-instance.ts","webpack:///./src/services/registration-service.ts","webpack:///./src/store/index.tsx","webpack:///./src/utils/recaptcha.ts","webpack:///./src/utils/registration-context.ts","webpack:///./src/utils/utils.ts"],"sourcesContent":["import React, { Suspense, lazy, useMemo } from 'react';\nimport { Navigate, Route as RouterRoute, Routes as RouterRoutes } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport { linkBasename } from '../utils/utils';\n\nconst SandboxPage = lazy(\n  () => import(/* webpackChunkName: \"SandboxPage\" */ './SandboxPage/SandboxPage'),\n);\nconst OopsPage = lazy(() => import(/* webpackChunkName: \"OopsPage\" */ './OopsPage/OopsPage'));\nconst NoPermissionsPage = lazy(\n  () => import(/* webpackChunkName: \"NoPermissionsPage\" */ './NoPermissionsPage/NoPermissionsPage'),\n);\n\nconst routes = [\n  {\n    path: 'no-permissions',\n    element: NoPermissionsPage,\n  },\n  {\n    path: 'oops',\n    element: OopsPage,\n  },\n  {\n    path: '/',\n    element: SandboxPage,\n  },\n];\n\ninterface RouteType {\n  path?: string;\n  element: React.ComponentType;\n  childRoutes?: RouteType[];\n  elementProps?: Record<string, unknown>;\n}\n\nconst renderRoutes = (routes: RouteType[] = []) =>\n  routes.map(({ path, element: Element, childRoutes, elementProps }) => (\n    <RouterRoute key={path} path={path} element={<Element {...elementProps} />}>\n      {renderRoutes(childRoutes)}\n    </RouterRoute>\n  ));\n\nconst Routing = () => {\n  const renderedRoutes = useMemo(() => renderRoutes(routes), [routes]);\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      <RouterRoutes>\n        {renderedRoutes}\n        <RouterRoute path=\"*\" element={<Navigate replace to={linkBasename} />} />\n      </RouterRoutes>\n    </Suspense>\n  );\n};\n\nexport default Routing;\n","import { Button } from '@patternfly/react-core';\nimport * as React from 'react';\n\nconst FooterButton = (\n  props: Pick<\n    React.ComponentProps<typeof Button>,\n    'children' | 'onClick' | 'isDisabled' | 'isLoading'\n  >,\n) => (\n  <div className=\"pf-u-pt-xl pf-u-pt-md pf-u-text-align-center\">\n    <Button {...props} className=\"pf-u-w-100 pf-u-w-initial-on-sm\" />\n  </div>\n);\n\nexport default FooterButton;\n","import * as React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertVariant,\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  Modal,\n  Spinner,\n  Text,\n  TextContent,\n  TextInput,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\nimport { CheckIcon } from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport FooterButton from './FooterButton';\nimport {\n  completePhoneVerification,\n  getSignupData,\n  initiatePhoneVerification,\n  isValidCountryCode,\n  isValidPhoneNumber,\n  signup,\n} from '../../services/registration-service';\nimport sandboxReadyImg from '../../images/launch-sandbox-success.svg';\nimport { errorMessage } from '../../utils/utils';\nimport { SignupData } from '../../types';\nimport { Status } from '../../utils/registration-context';\nimport { useTrackEvent } from '../../hooks/useTrackEvent';\nimport AnalyticsButton from '../AnalyticsButton/AnalyticsButton';\nimport { SHORT_INTERVAL } from '../../utils/const';\n\ntype Props = {\n  initialStatus?: Status;\n  onClose: (signupData?: SignupData) => void;\n};\n\nconst RegistrationModal = ({ onClose, initialStatus }: Props) => {\n  const track = useTrackEvent();\n\n  const [step, setStep] = React.useState<\n    'new' | 'ready' | 'provisioning' | 'verify' | 'verifyCode' | 'pending-approval'\n  >(initialStatus && initialStatus !== 'unknown' ? initialStatus : 'new');\n  const [error, setError] = React.useState<string | undefined>();\n  const [verifyCode, setVerifyCode] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const [countryCode, setCountryCode] = React.useState('');\n  const [phoneNumber, setPhoneNumber] = React.useState('');\n  const [codeResent, setCodeResent] = React.useState(false);\n\n  const [signupData, setSignupDataState] = React.useState<SignupData>();\n\n  const getSignupDataFn = React.useCallback(async () => {\n    try {\n      const data = await getSignupData();\n      setSignupDataState(data);\n      if (data == null) {\n        setStep('new');\n      } else if (data.status.ready === true) {\n        setStep('ready');\n      } else if (data.status.ready === false && data.status.verificationRequired) {\n        setStep((cur) => (cur !== 'verify' && cur !== 'verifyCode' ? 'verify' : cur));\n      } else if (data.status.ready === false && data.status.reason === 'Provisioning') {\n        setStep('provisioning');\n      } else {\n        setStep('pending-approval');\n      }\n    } catch (e) {\n      setError(errorMessage(e));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (step === 'provisioning' || step === 'pending-approval') {\n      const handle = setInterval(getSignupDataFn, SHORT_INTERVAL);\n      return () => {\n        clearInterval(handle);\n      };\n    }\n  }, [step]);\n\n  React.useEffect(() => {\n    if (error) {\n      track('DevSandbox Signup Error', {\n        error,\n      });\n    }\n  }, [error]);\n\n  React.useEffect(() => {\n    track('DevSandbox Signup Step', {\n      step,\n    });\n  }, [step]);\n\n  return (\n    <Modal\n      data-testid=\"registration-modal\"\n      width={600}\n      aria-labelledby=\"registration-modal-title\"\n      header={\n        // custom title to prevent ellipsis overflow on small screens\n        <Title id=\"registration-modal-title\" headingLevel=\"h1\">\n          {step === 'ready'\n            ? \"Congratulations, you're ready to get started!\"\n            : 'Activate your free 30 days trial'}\n        </Title>\n      }\n      isOpen\n      onClose={() => onClose(signupData)}\n    >\n      {error ? (\n        <Alert\n          title=\"An error occurred\"\n          variant={AlertVariant.danger}\n          actionClose={<AlertActionCloseButton onClose={() => setError(undefined)} />}\n          isInline\n          className=\"pf-u-mb-lg\"\n        >\n          {error}\n        </Alert>\n      ) : null}\n      {(() => {\n        switch (step) {\n          case 'new':\n            return (\n              <FooterButton\n                isDisabled={loading}\n                isLoading={loading}\n                onClick={async () => {\n                  try {\n                    setError(undefined);\n                    setLoading(true);\n                    await signup();\n                    await getSignupDataFn();\n                  } catch (e) {\n                    setError(errorMessage(e));\n                  } finally {\n                    setLoading(false);\n                  }\n                }}\n              >\n                Activate\n              </FooterButton>\n            );\n          case 'verify':\n            return (\n              <>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    We are preparing your Sandbox. It will be available shortly.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    One more thing, to ensure your account is secure please enter a valid phone\n                    number for SMS verification.\n                  </Text>\n                </TextContent>\n                <Form>\n                  <Grid hasGutter className=\"pf-u-mt-md\" style={{ alignItems: 'end' }}>\n                    <GridItem span={3}>\n                      <FormGroup label=\"Country code\" isRequired>\n                        <TextInput\n                          aria-label=\"Country code\"\n                          isRequired\n                          validated={\n                            !countryCode || isValidCountryCode(countryCode) ? 'default' : 'error'\n                          }\n                          type=\"text\"\n                          placeholder=\"+01\"\n                          minLength={1}\n                          maxLength={4}\n                          value={countryCode}\n                          onChange={(value) => {\n                            setError(undefined);\n                            setCountryCode(value);\n                          }}\n                        />\n                      </FormGroup>\n                    </GridItem>\n                    <GridItem span={9}>\n                      <FormGroup label=\"Phone number\" isRequired>\n                        <TextInput\n                          aria-label=\"Phone number\"\n                          isRequired\n                          validated={\n                            !phoneNumber || isValidPhoneNumber(phoneNumber) ? 'default' : 'error'\n                          }\n                          type=\"tel\"\n                          placeholder=\"123-456-7890\"\n                          minLength={6}\n                          maxLength={32}\n                          value={phoneNumber}\n                          onChange={(value) => {\n                            setError(undefined);\n                            setPhoneNumber(value);\n                          }}\n                        />\n                      </FormGroup>\n                    </GridItem>\n                  </Grid>\n                </Form>\n                <FooterButton\n                  isDisabled={\n                    loading || !isValidCountryCode(countryCode) || !isValidPhoneNumber(phoneNumber)\n                  }\n                  isLoading={loading}\n                  onClick={async () => {\n                    try {\n                      setError(undefined);\n                      setLoading(true);\n                      await initiatePhoneVerification(countryCode, phoneNumber);\n                      setStep('verifyCode');\n                    } catch (e) {\n                      setError(errorMessage(e));\n                    } finally {\n                      setLoading(false);\n                    }\n                  }}\n                >\n                  Next\n                </FooterButton>\n              </>\n            );\n          case 'verifyCode':\n            return (\n              <>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    We are preparing your Sandbox. It will be available shortly.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    We sent a verification code to \"<b>{`${countryCode} ${phoneNumber}`}</b>\"\n                  </Text>\n                </TextContent>\n                <Form>\n                  <FormGroup label=\"Verification code\" isRequired className=\"pf-u-mt-md pf-u-mb-md\">\n                    <TextInput\n                      aria-label=\"Veritification code\"\n                      isRequired\n                      validated={!verifyCode || verifyCode.length === 6 ? 'default' : 'error'}\n                      minLength={6}\n                      maxLength={6}\n                      placeholder=\"XXXXXX\"\n                      value={verifyCode || ''}\n                      onChange={(value) => {\n                        setError(undefined);\n                        setCodeResent(false);\n                        setVerifyCode(value);\n                      }}\n                    />\n                  </FormGroup>\n                </Form>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    No text received?{' '}\n                    <AnalyticsButton\n                      isInline\n                      variant={ButtonVariant.link}\n                      onClick={() => {\n                        setError(undefined);\n                        setVerifyCode('');\n                        initiatePhoneVerification(countryCode, phoneNumber);\n                        setCodeResent(true);\n                      }}\n                      analytics={{\n                        event: 'DevSandbox Signup Resend Code',\n                      }}\n                    >\n                      Resend code\n                    </AnalyticsButton>\n                    {codeResent ? (\n                      <CheckIcon\n                        className=\"pf-u-ml-md\"\n                        style={{ color: 'var(--pf-global--success-color--100)' }}\n                      />\n                    ) : null}\n                    <br />\n                    Or{' '}\n                    <Button\n                      isInline\n                      variant={ButtonVariant.link}\n                      onClick={() => {\n                        setError(undefined);\n                        setStep('verify');\n                        setVerifyCode('');\n                      }}\n                    >\n                      use a different phone number\n                    </Button>\n                  </Text>\n                </TextContent>\n                <FooterButton\n                  isDisabled={loading || verifyCode.length !== 6}\n                  isLoading={loading}\n                  onClick={async () => {\n                    try {\n                      setError(undefined);\n                      setLoading(true);\n                      await completePhoneVerification(verifyCode);\n                      await getSignupDataFn();\n                    } catch (e) {\n                      setError(\n                        errorMessage(e) ||\n                          'Error while sending verification code. Please try again.',\n                      );\n                    } finally {\n                      setLoading(false);\n                    }\n                  }}\n                >\n                  Next\n                </FooterButton>\n              </>\n            );\n          case 'provisioning':\n            return (\n              <>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    We are preparing your Sandbox. It will be available shortly.\n                  </Text>\n                </TextContent>\n                <Bullseye className=\"pf-u-mt-2xl pf-u-mb-lg\">\n                  <Spinner isSVG size=\"xl\" />\n                </Bullseye>\n                <FooterButton isDisabled>Launch Sandbox</FooterButton>\n              </>\n            );\n\n          case 'pending-approval':\n            return (\n              <>\n                <TextContent>\n                  <p>Your Sandbox account is waiting for approval.</p>\n                </TextContent>\n                <Bullseye className=\"pf-u-mt-2xl pf-u-mb-lg\">\n                  <Spinner isSVG size=\"xl\" />\n                </Bullseye>\n                <FooterButton onClick={() => onClose(signupData)}>Close</FooterButton>\n              </>\n            );\n          case 'ready':\n            return (\n              <>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Your Sandbox will be activate for the next 30 days. Jump right in and start\n                    building!\n                  </Text>\n                </TextContent>\n                <div className=\"pf-u-p-md\">\n                  <img src={sandboxReadyImg} />\n                </div>\n                <FooterButton onClick={() => onClose(signupData)}>Got it</FooterButton>\n              </>\n            );\n          default:\n            return null;\n        }\n      })()}\n    </Modal>\n  );\n};\n\nexport default RegistrationModal;\n","export const SHORT_INTERVAL = 2000;\nexport const LONG_INTERVAL = 20000;\n","import * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport {\n  RegistrationContext,\n  RegistrationContextValue,\n  signupDataToStatus,\n} from '../utils/registration-context';\nimport { getSignupData } from '../services/registration-service';\nimport RegistrationModal from './RegistrationModal/RegistrationModal';\nimport { SignupData } from '../types';\nimport { errorMessage } from '../utils/utils';\nimport { useTrackEvent } from '../hooks/useTrackEvent';\nimport { useRecaptcha } from '../hooks/useRecaptcha';\nimport { LONG_INTERVAL, SHORT_INTERVAL } from '../utils/const';\n\nconst RegistrationProvider = ({ children }: { children?: React.ReactNode }) => {\n  useRecaptcha();\n  const track = useTrackEvent();\n\n  // state\n  const [statusUnknown, setStatusUnknown] = React.useState(true);\n  const [signupData, setSignupData] = React.useState<SignupData>();\n  const [error, setError] = React.useState<string>();\n  const [showUserSignup, setShowUserSignup] = React.useState(false);\n  const [showModalOnReady, setShowModalOnReady] = React.useState(false);\n\n  const status = React.useMemo(\n    () => (statusUnknown ? 'unknown' : signupDataToStatus(signupData)),\n    [statusUnknown, signupData],\n  );\n\n  React.useEffect(() => {\n    // send event when signup status is first established and upon change\n    if (!statusUnknown) {\n      track('DevSandbox Signup Status', {\n        status,\n      });\n    }\n  }, [statusUnknown, status]);\n\n  const getSignupDataRef = React.useRef<() => void>();\n  getSignupDataRef.current = async () => {\n    try {\n      const data = await getSignupData();\n      if (!isEqual(data, signupData)) {\n        setSignupData(data);\n      }\n      setError(undefined);\n      setStatusUnknown(false);\n    } catch (e) {\n      setError(`An error occurred retrieving registration status. ${errorMessage(e)}`);\n      setStatusUnknown(false);\n    }\n  };\n\n  const refreshSignupData = React.useCallback(async () => getSignupDataRef.current?.(), []);\n\n  React.useEffect(() => {\n    getSignupDataRef.current?.();\n  }, []);\n\n  const pollStatus = !showUserSignup;\n  const pollInterval = status === 'provisioning' ? SHORT_INTERVAL : LONG_INTERVAL;\n  React.useEffect(() => {\n    if (pollStatus) {\n      const handle = setInterval(() => {\n        getSignupDataRef.current?.();\n      }, pollInterval);\n      return () => {\n        clearInterval(handle);\n      };\n    }\n  }, [pollStatus, pollInterval]);\n\n  const actions = React.useMemo(\n    () => ({ setError, setSignupData, setShowUserSignup, refreshSignupData }),\n    [refreshSignupData],\n  );\n\n  const contextValue: RegistrationContextValue = React.useMemo(\n    () => [\n      {\n        error,\n        signupData,\n        showUserSignup,\n        status,\n      },\n      actions,\n    ],\n    [error, signupData, showUserSignup, status, actions],\n  );\n\n  React.useEffect(() => {\n    if (status === 'ready' && showModalOnReady) {\n      // when signup status transitions to ready, show the modal\n      setShowUserSignup(true);\n    } else if (status !== 'ready' && !showModalOnReady && !statusUnknown) {\n      // when signup status transitions from ready, prepare to show the modal\n      setShowModalOnReady(true);\n    }\n  }, [status]);\n\n  return (\n    <RegistrationContext.Provider value={contextValue}>\n      {showUserSignup ? (\n        <RegistrationModal\n          initialStatus={status}\n          onClose={(newSignupData) => {\n            track('DevSandbox Signup Closed');\n            if (newSignupData) {\n              setSignupData(newSignupData);\n            }\n            setShowUserSignup(false);\n          }}\n        />\n      ) : null}\n      {children}\n    </RegistrationContext.Provider>\n  );\n};\n\nexport default RegistrationProvider;\n","import * as React from 'react';\nimport { loadRecaptchaScript } from '../utils/recaptcha';\n\nexport const useRecaptcha = () => {\n  React.useEffect(() => {\n    loadRecaptchaScript();\n  }, []);\n};\n","import React, { Fragment, useEffect } from 'react';\nimport { Reducer } from 'redux';\nimport Routing from './routes/Routing';\n\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport RegistrationProvider from './components/RegistrationProvider';\n\nconst App = () => {\n  const { updateDocumentTitle } = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n    // You can use directly the name of your app\n    updateDocumentTitle('Developer Sandbox');\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <RegistrationProvider>\n        <Routing />\n      </RegistrationProvider>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\nimport { Button, ButtonProps } from '@patternfly/react-core';\nimport { AnalyticProps, useTrackEvent } from '../../hooks/useTrackEvent';\n\nconst AnalyticsButton: React.FC<\n  ButtonProps & {\n    analytics?: AnalyticProps;\n  }\n> = ({ onClick, analytics, ...props }) => {\n  const track = useTrackEvent();\n  return (\n    <Button\n      {...props}\n      onClick={\n        analytics\n          ? (...args) => {\n              track(analytics.event, analytics.properties);\n              onClick?.(...args);\n            }\n          : onClick\n      }\n    />\n  );\n};\n\nexport default AnalyticsButton;\n","import * as React from 'react';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\ntype JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;\n\ninterface JSONObject {\n  [x: string]: JSONValue;\n}\n\nexport type AnalyticProps = {\n  event: string;\n  properties?: JSONObject;\n};\n\nexport const useTrackEvent = () => {\n  const { analytics } = useChrome();\n  return React.useCallback(\n    (event: string, properties?: JSONObject) => {\n      if (process.env.NODE_ENV !== 'development') {\n        analytics?.track(event, properties);\n      } else {\n        // eslint-disable-next-line no-console\n        console.log('analytics.track', event, properties);\n      }\n    },\n    [analytics],\n  );\n};\n","import axios, { AxiosRequestConfig } from 'axios';\n\nconst baseURL =\n  'https://registration-service-toolchain-host-operator.apps.sandbox.x8i5.p1.openshiftapps.com';\n\nexport const axiosInstance = axios.create();\naxiosInstance.interceptors.request.use((reqConfig: AxiosRequestConfig) => ({\n  baseURL,\n  ...reqConfig,\n}));\n\naxiosInstance.interceptors.request.use((reqConfig: AxiosRequestConfig) => {\n  return window.insights.chrome.auth.getToken().then((bearerToken) => {\n    if (!bearerToken) {\n      return reqConfig;\n    }\n    return {\n      ...reqConfig,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${bearerToken}`,\n        ...reqConfig.headers,\n      },\n    };\n  });\n});\n","import { axiosInstance } from './axios-instance';\nimport axios from 'axios';\nimport { recaptchaApiKey } from '../utils/recaptcha';\nimport { SignupData } from '../types';\n\n// signup endpoint\nconst signupURL = '/api/v1/signup';\n\n// phone verification endpoint\nconst phoneVerificationURL = '/api/v1/signup/verification';\n\nexport const getSignupData = async (): Promise<SignupData | undefined> => {\n  try {\n    const { data } = await axiosInstance.get<SignupData>(signupURL);\n    return data;\n  } catch (e) {\n    if (axios.isAxiosError(e)) {\n      if (e.response?.status === 404) {\n        return undefined;\n      }\n    }\n    throw e;\n  }\n};\n\nconst getRecaptchaToken = async (): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const apiKey = recaptchaApiKey;\n    let timeout = false;\n    const captchaTimeout = setTimeout(() => {\n      timeout = true;\n      reject('Recaptcha timeout.');\n    }, 10000);\n    if (grecaptcha?.enterprise) {\n      grecaptcha.enterprise.ready(async () => {\n        if (!timeout) {\n          clearTimeout(captchaTimeout);\n          try {\n            resolve(\n              await grecaptcha.enterprise.execute(apiKey, {\n                action: 'SIGNUP',\n              }),\n            );\n          } catch (e) {\n            reject('Recaptcha failure.');\n          }\n        }\n      });\n    } else {\n      reject('Recaptcha failure.');\n    }\n  });\n};\n\nexport const signup = async () => {\n  const token = await getRecaptchaToken();\n  await axiosInstance.post(signupURL, null, {\n    headers: {\n      'Recaptcha-Token': token,\n    },\n  });\n};\n\nexport const initiatePhoneVerification = async (countryCode: string, phoneNumber: string) => {\n  if (!isValidCountryCode(countryCode)) {\n    throw 'Invalid country code.';\n  }\n  if (!isValidPhoneNumber(phoneNumber)) {\n    throw 'Invalid phone number.';\n  }\n  await axiosInstance.put(phoneVerificationURL, {\n    country_code: countryCode,\n    phone_number: phoneNumber,\n  });\n};\n\nexport const completePhoneVerification = async (code: string) => {\n  await axiosInstance.get(`${phoneVerificationURL}/${code}`);\n};\n\nexport const isValidCountryCode = (countryCode: string) => /^[+]?[0-9]+$/.test(countryCode);\nexport const isValidPhoneNumber = (phoneNumber: string) =>\n  /^[(]?[0-9]+[)]?[-\\s.]?[0-9]+[-\\s./0-9]*$/im.test(phoneNumber);\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware, Reducer } from 'redux';\n\nexport let registry: ReducerRegistry<Reducer>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","export const recaptchaApiKey =\n  process.env.NODE_ENV === 'test' ? 'test-api-key' : '6LdL7aMlAAAAALvuuAZWjwlOLRKMCIrWjOpv-U3G';\n\nexport const loadRecaptchaScript = (): void => {\n  if (recaptchaApiKey) {\n    const url = `https://www.google.com/recaptcha/enterprise.js?render=${recaptchaApiKey}`;\n    const recaptchaScriptNode = document.querySelector(`script[src=\"${url}\"]`);\n    if (!recaptchaScriptNode) {\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = url;\n      script.async = true;\n      script.defer = true;\n\n      document.head.appendChild(script);\n    }\n  }\n};\n","import * as React from 'react';\nimport { SignupData } from '../types';\n\n// state\nexport type Status = 'unknown' | 'new' | 'verify' | 'pending-approval' | 'provisioning' | 'ready';\nexport type RegistrationState = {\n  showUserSignup?: boolean;\n  status: Status;\n  signupData?: SignupData;\n  error?: string;\n};\n\n// actions\nexport type RegistrationActions = {\n  refreshSignupData: () => Promise<void>;\n  setShowUserSignup: (showUserSignup: boolean) => void;\n  setSignupData: (data: SignupData | undefined) => void;\n  setError: (error: string | undefined) => void;\n};\n\n// context\nexport type RegistrationContextValue = [RegistrationState, RegistrationActions];\nexport const RegistrationContext = React.createContext<RegistrationContextValue>(\n  null as unknown as RegistrationContextValue,\n);\n\nexport const signupDataToStatus = (signupData?: SignupData): Status => {\n  let status: Status;\n  if (signupData == null) {\n    status = 'new';\n  } else if (signupData.status.ready === true) {\n    status = 'ready';\n  } else if (signupData.status.ready === false && signupData.status.verificationRequired) {\n    status = 'verify';\n  } else if (signupData.status.ready === false && signupData.status.reason === 'Provisioning') {\n    status = 'provisioning';\n  } else {\n    // unknown state\n    status = 'pending-approval';\n  }\n  return status;\n};\n","import axios from 'axios';\nimport { To } from 'react-router-dom';\n\nexport const linkBasename = '/openshift/sandbox';\nexport const mergeToBasename = (to: To, basename: string): To => {\n  if (typeof to === 'string') {\n    // replace possible \"//\" after basename\n    return `${basename}/${to}`.replace(`^${basename}//`, '/');\n  }\n\n  return {\n    ...to,\n    pathname: `${basename}/${to.pathname}`.replace(`^${basename}//`, '/'),\n  };\n};\n\nexport const errorMessage = (e: unknown): string =>\n  (axios.isAxiosError(e)\n    ? (e.response?.data as { message?: string })?.message || e.message\n    : typeof e === 'object'\n    ? e?.toString()\n    : typeof e === 'string'\n    ? e\n    : '') || '';\n"],"names":["SandboxPage","lazy","OopsPage","routes","path","element","renderRoutes","map","Element","childRoutes","elementProps","Route","key","renderedRoutes","useMemo","Suspense","fallback","Bullseye","Spinner","Navigate","replace","to","props","className","Button","onClose","initialStatus","track","useTrackEvent","step","setStep","error","setError","verifyCode","setVerifyCode","loading","setLoading","countryCode","setCountryCode","phoneNumber","setPhoneNumber","codeResent","setCodeResent","signupData","setSignupDataState","getSignupDataFn","data","status","ready","verificationRequired","cur","reason","setInterval","clearInterval","Modal","width","header","Title","id","headingLevel","isOpen","Alert","title","variant","AlertVariant","actionClose","AlertActionCloseButton","undefined","isInline","isDisabled","isLoading","onClick","TextContent","Text","component","TextVariants","Form","Grid","hasGutter","style","alignItems","GridItem","span","FormGroup","label","isRequired","TextInput","validated","type","placeholder","minLength","maxLength","value","onChange","length","AnalyticsButton","ButtonVariant","analytics","event","color","isSVG","size","src","children","statusUnknown","setStatusUnknown","setSignupData","showUserSignup","setShowUserSignup","showModalOnReady","setShowModalOnReady","getSignupDataRef","current","refreshSignupData","pollStatus","pollInterval","actions","contextValue","newSignupData","updateDocumentTitle","useChrome","useEffect","register","notifications","Fragment","properties","args","axiosInstance","interceptors","request","use","reqConfig","baseURL","window","insights","chrome","auth","getToken","then","bearerToken","headers","Accept","Authorization","signupURL","phoneVerificationURL","getSignupData","Promise","get","response","signup","resolve","reject","apiKey","recaptcha","r","timeout","captchaTimeout","setTimeout","grecaptcha","enterprise","clearTimeout","execute","action","token","post","initiatePhoneVerification","isValidCountryCode","isValidPhoneNumber","put","country_code","phone_number","completePhoneVerification","code","test","init","errorDescriptionKey","middleware","recaptchaApiKey","loadRecaptchaScript","url","document","querySelector","script","createElement","async","defer","head","appendChild","RegistrationContext","signupDataToStatus","linkBasename","errorMessage","e","message","toString"],"sourceRoot":""}