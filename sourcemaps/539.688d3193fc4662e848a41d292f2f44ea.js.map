{"version":3,"file":"js/539.1689091446144.fef4931de888bacffc41.js","mappings":"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","sources":["webpack:///./src/utils/utils.ts","webpack:///./src/routes/Routing.tsx","webpack:///./src/services/axios-instance.ts","webpack:///./src/utils/recaptcha.ts","webpack:///./src/services/registration-service.ts","webpack:///./src/components/RegistrationModal/FooterButton.tsx","webpack:///./src/hooks/useRecaptcha.ts","webpack:///./src/components/RegistrationModal/RegistrationModal.tsx","webpack:///./src/components/RegistrationProvider.tsx","webpack:///./src/App.tsx","webpack:///./src/store/index.tsx","webpack:///./src/utils/registration-context.ts"],"sourcesContent":["import axios from 'axios';\nimport { To } from 'react-router-dom';\n\nexport const linkBasename = '/openshift/sandbox';\nexport const mergeToBasename = (to: To, basename: string): To => {\n  if (typeof to === 'string') {\n    // replace possible \"//\" after basename\n    return `${basename}/${to}`.replace(`^${basename}//`, '/');\n  }\n\n  return {\n    ...to,\n    pathname: `${basename}/${to.pathname}`.replace(`^${basename}//`, '/'),\n  };\n};\n\nexport const errorMessage = (e: unknown): string =>\n  (axios.isAxiosError(e)\n    ? e.message\n    : typeof e === 'object'\n    ? e?.toString()\n    : typeof e === 'string'\n    ? e\n    : '') || '';\n","import React, { Suspense, lazy, useMemo } from 'react';\nimport { Navigate, Route as RouterRoute, Routes as RouterRoutes } from 'react-router-dom';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport { linkBasename } from '../utils/utils';\n\nconst SandboxPage = lazy(\n  () => import(/* webpackChunkName: \"SandboxPage\" */ './SandboxPage/SandboxPage'),\n);\nconst OopsPage = lazy(() => import(/* webpackChunkName: \"OopsPage\" */ './OopsPage/OopsPage'));\nconst NoPermissionsPage = lazy(\n  () => import(/* webpackChunkName: \"NoPermissionsPage\" */ './NoPermissionsPage/NoPermissionsPage'),\n);\n\nconst routes = [\n  {\n    path: 'no-permissions',\n    element: NoPermissionsPage,\n  },\n  {\n    path: 'oops',\n    element: OopsPage,\n  },\n  {\n    path: '/',\n    element: SandboxPage,\n  },\n];\n\ninterface RouteType {\n  path?: string;\n  element: React.ComponentType;\n  childRoutes?: RouteType[];\n  elementProps?: Record<string, unknown>;\n}\n\nconst renderRoutes = (routes: RouteType[] = []) =>\n  routes.map(({ path, element: Element, childRoutes, elementProps }) => (\n    <RouterRoute key={path} path={path} element={<Element {...elementProps} />}>\n      {renderRoutes(childRoutes)}\n    </RouterRoute>\n  ));\n\nconst Routing = () => {\n  const renderedRoutes = useMemo(() => renderRoutes(routes), [routes]);\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      <RouterRoutes>\n        {renderedRoutes}\n        <RouterRoute path=\"*\" element={<Navigate replace to={linkBasename} />} />\n      </RouterRoutes>\n    </Suspense>\n  );\n};\n\nexport default Routing;\n","import axios, { AxiosRequestConfig } from 'axios';\n\nconst baseURL =\n  'https://registration-service-toolchain-host-operator.apps.sandbox.x8i5.p1.openshiftapps.com';\n\nexport const axiosInstance = axios.create();\naxiosInstance.interceptors.request.use((reqConfig: AxiosRequestConfig) => ({\n  baseURL,\n  ...reqConfig,\n}));\n\naxiosInstance.interceptors.request.use((reqConfig: AxiosRequestConfig) => {\n  return window.insights.chrome.auth.getToken().then((bearerToken) => {\n    if (!bearerToken) {\n      return reqConfig;\n    }\n    return {\n      ...reqConfig,\n      headers: {\n        Accept: 'application/json',\n        Authorization: `Bearer ${bearerToken}`,\n        ...reqConfig.headers,\n      },\n    };\n  });\n});\n","export const recaptchaApiKey =\n  process.env.NODE_ENV === 'test' ? 'test-api-key' : '6LdL7aMlAAAAALvuuAZWjwlOLRKMCIrWjOpv-U3G';\n\nexport const loadRecaptchaScript = (): void => {\n  if (recaptchaApiKey) {\n    const url = `https://www.google.com/recaptcha/enterprise.js?render=${recaptchaApiKey}`;\n    const recaptchaScriptNode = document.querySelector(`script[src=\"${url}\"]`);\n    if (!recaptchaScriptNode) {\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = url;\n      script.async = true;\n      script.defer = true;\n\n      document.head.appendChild(script);\n    }\n  }\n};\n","import { axiosInstance } from './axios-instance';\nimport axios from 'axios';\nimport { recaptchaApiKey } from '../utils/recaptcha';\nimport { SignupData } from '../types';\n\n// signup endpoint\nconst signupURL = '/api/v1/signup';\n\n// phone verification endpoint\nconst phoneVerificationURL = '/api/v1/signup/verification';\n\nexport const getSignupData = async (): Promise<SignupData | undefined> => {\n  try {\n    const { data } = await axiosInstance.get<SignupData>(signupURL);\n    return data;\n  } catch (e) {\n    if (axios.isAxiosError(e)) {\n      if (e.response?.status === 404) {\n        return undefined;\n      }\n    }\n    throw e;\n  }\n};\n\nconst getRecaptchaToken = async (): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const apiKey = recaptchaApiKey;\n    let timeout = false;\n    const captchaTimeout = setTimeout(() => {\n      timeout = true;\n      reject('Recaptcha timeout.');\n    }, 10000);\n    if (grecaptcha?.enterprise) {\n      grecaptcha.enterprise.ready(async () => {\n        if (!timeout) {\n          clearTimeout(captchaTimeout);\n          try {\n            resolve(\n              await grecaptcha.enterprise.execute(apiKey, {\n                action: 'SIGNUP',\n              }),\n            );\n          } catch (e) {\n            reject('Recaptcha failure.');\n          }\n        }\n      });\n    } else {\n      reject('Recaptcha failure.');\n    }\n  });\n};\n\nexport const signup = async () => {\n  const token = await getRecaptchaToken();\n  await axiosInstance.post(signupURL, null, {\n    headers: {\n      'Recaptcha-Token': token,\n    },\n  });\n};\n\nexport const initiatePhoneVerification = async (countryCode: string, phoneNumber: string) => {\n  if (!isValidCountryCode(countryCode)) {\n    throw 'Invalid country code.';\n  }\n  if (!isValidPhoneNumber(phoneNumber)) {\n    throw 'Invalid phone number.';\n  }\n  await axiosInstance.put(phoneVerificationURL, {\n    country_code: countryCode,\n    phone_number: phoneNumber,\n  });\n};\n\nexport const completePhoneVerification = async (code: string) => {\n  await axiosInstance.get(`${phoneVerificationURL}/${code}`);\n};\n\nexport const isValidCountryCode = (countryCode: string) => /^[+]?[0-9]+$/.test(countryCode);\nexport const isValidPhoneNumber = (phoneNumber: string) =>\n  /^[(]?[0-9]+[)]?[-\\s.]?[0-9]+[-\\s./0-9]*$/im.test(phoneNumber);\n","import { Button } from '@patternfly/react-core';\nimport * as React from 'react';\n\nconst FooterButton = (\n  props: Pick<\n    React.ComponentProps<typeof Button>,\n    'children' | 'onClick' | 'isDisabled' | 'isLoading'\n  >,\n) => (\n  <div className=\"pf-u-pt-xl pf-u-pt-md pf-u-text-align-center\">\n    <Button {...props} />\n  </div>\n);\n\nexport default FooterButton;\n","import * as React from 'react';\nimport { loadRecaptchaScript } from '../utils/recaptcha';\n\nexport const useRecaptcha = () => {\n  React.useEffect(() => {\n    loadRecaptchaScript();\n  }, []);\n};\n","import * as React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertVariant,\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  Modal,\n  ModalVariant,\n  Spinner,\n  TextContent,\n  TextInput,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport { CheckIcon } from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport FooterButton from './FooterButton';\nimport {\n  completePhoneVerification,\n  getSignupData,\n  initiatePhoneVerification,\n  isValidCountryCode,\n  isValidPhoneNumber,\n  signup,\n} from '../../services/registration-service';\nimport sandboxReadyImg from '../../images/launch-sandbox-success.svg';\nimport { useRecaptcha } from '../../hooks/useRecaptcha';\nimport { errorMessage } from '../../utils/utils';\nimport { SignupData } from '../../types';\nimport { Status } from '../../utils/registration-context';\n\ntype Props = {\n  initialStatus?: Status;\n  onClose: (signupData?: SignupData) => void;\n};\n\nconst RegistrationModal = ({ onClose, initialStatus }: Props) => {\n  useRecaptcha();\n\n  const [step, setStep] = React.useState<\n    'new' | 'ready' | 'provisioning' | 'verify' | 'verifyCode' | 'pending-approval'\n  >(initialStatus && initialStatus !== 'unknown' ? initialStatus : 'new');\n  const [error, setError] = React.useState<string>();\n  const [verifyCode, setVerifyCode] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const [countryCode, setCountryCode] = React.useState('');\n  const [phoneNumber, setPhoneNumber] = React.useState('');\n  const [codeResent, setCodeResent] = React.useState(false);\n  const [accepted, setAccepted] = React.useState(false);\n\n  const [signupData, setSignupDataState] = React.useState<SignupData>();\n\n  const getSignupDataFn = React.useCallback(async () => {\n    try {\n      const data = await getSignupData();\n      setSignupDataState(data);\n      if (data == null) {\n        setStep('new');\n      } else if (data.status.ready === true) {\n        setStep('ready');\n      } else if (data.status.ready === false && data.status.verificationRequired) {\n        setStep((cur) => (cur !== 'verify' && cur !== 'verifyCode' ? 'verify' : cur));\n      } else if (data.status.ready === false && data.status.reason === 'Provisioning') {\n        setStep('provisioning');\n      } else {\n        setStep('pending-approval');\n      }\n    } catch (e) {\n      setError(errorMessage(e));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (step === 'provisioning' || step === 'pending-approval') {\n      const handle = setInterval(getSignupDataFn, 1000);\n      return () => {\n        clearInterval(handle);\n      };\n    }\n  }, [step]);\n\n  return (\n    <Modal\n      data-testid=\"registration-modal\"\n      variant={ModalVariant.small}\n      title={\n        step === 'ready'\n          ? \"Congratulations, you're ready to get started!\"\n          : 'Activate your free 30 days trial'\n      }\n      isOpen\n      onClose={() => onClose()}\n    >\n      {error ? (\n        <Alert\n          title=\"An error occurred\"\n          variant={AlertVariant.danger}\n          actionClose={<AlertActionCloseButton onClose={() => setError(undefined)} />}\n          isInline\n          className=\"pf-u-mb-lg\"\n        >\n          {error}\n        </Alert>\n      ) : null}\n      {(() => {\n        switch (step) {\n          case 'new':\n            return (\n              <>\n                <TextContent>\n                  <p>\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n                    incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\n                    nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n                    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\n                    fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n                    culpa qui officia deserunt mollit anim id est laborum.\n                  </p>\n                </TextContent>\n                <div className=\"pf-u-pt-lg pf-u-pt-md pf-u-text-align-center\">\n                  <Checkbox\n                    aria-label=\"Join the Red Hat Developers program\"\n                    id=\"accept-join\"\n                    isChecked={accepted}\n                    onChange={(checked) => setAccepted(checked)}\n                    className=\"pf-u-mr-sm\"\n                  />\n                  Join the{' '}\n                  <Button\n                    variant={ButtonVariant.link}\n                    isInline\n                    component=\"a\"\n                    href=\"https://developers.redhat.com/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Red Hat Developers program <ExternalLinkAltIcon />\n                  </Button>\n                </div>\n                <FooterButton\n                  isDisabled={loading || !accepted}\n                  isLoading={loading}\n                  onClick={async () => {\n                    try {\n                      setLoading(true);\n                      await signup();\n                      await getSignupDataFn();\n                    } catch (e) {\n                      setError(errorMessage(e));\n                    } finally {\n                      setLoading(false);\n                    }\n                  }}\n                >\n                  Activate\n                </FooterButton>\n              </>\n            );\n          case 'verify':\n            return (\n              <>\n                <TextContent>\n                  <p>We are preparing your Sandbox. It will be available shortly.</p>\n                  <p>\n                    One more thing, to ensure your account is secure please enter a valid phone\n                    number for SMS verification.\n                  </p>\n                </TextContent>\n                <Form>\n                  <Grid hasGutter className=\"pf-u-mt-md\">\n                    <GridItem span={3}>\n                      <FormGroup label=\"Country code\" isRequired>\n                        <TextInput\n                          aria-label=\"Country code\"\n                          isRequired\n                          validated={\n                            !countryCode || isValidCountryCode(countryCode) ? 'default' : 'error'\n                          }\n                          type=\"text\"\n                          placeholder=\"+01\"\n                          minLength={1}\n                          maxLength={4}\n                          value={countryCode}\n                          onChange={(value) => {\n                            setCountryCode(value);\n                          }}\n                        />\n                      </FormGroup>\n                    </GridItem>\n                    <GridItem span={9}>\n                      <FormGroup label=\"Phone number\" isRequired>\n                        <TextInput\n                          aria-label=\"Phone number\"\n                          isRequired\n                          validated={\n                            !phoneNumber || isValidPhoneNumber(phoneNumber) ? 'default' : 'error'\n                          }\n                          type=\"tel\"\n                          placeholder=\"123-456-7890\"\n                          minLength={6}\n                          maxLength={32}\n                          value={phoneNumber}\n                          onChange={(value) => {\n                            setPhoneNumber(value);\n                          }}\n                        />\n                      </FormGroup>\n                    </GridItem>\n                  </Grid>\n                </Form>\n                <FooterButton\n                  isDisabled={\n                    loading || !isValidCountryCode(countryCode) || !isValidPhoneNumber(phoneNumber)\n                  }\n                  onClick={async () => {\n                    try {\n                      setLoading(true);\n                      await initiatePhoneVerification(countryCode, phoneNumber);\n                      setStep('verifyCode');\n                    } catch (e) {\n                      setError(errorMessage(e));\n                    } finally {\n                      setLoading(false);\n                    }\n                  }}\n                >\n                  Next\n                </FooterButton>\n              </>\n            );\n          case 'verifyCode':\n            return (\n              <>\n                <TextContent>\n                  <p>We are preparing your Sandbox. It will be available shortly.</p>\n                  <p>\n                    We sent a verification code to \"<b>{`${countryCode} ${phoneNumber}`}</b>\"\n                  </p>\n                </TextContent>\n                <Form>\n                  <FormGroup label=\"Verification code\" isRequired className=\"pf-u-mt-md pf-u-mb-md\">\n                    <TextInput\n                      aria-label=\"Veritification code\"\n                      isRequired\n                      validated={!verifyCode || verifyCode.length === 5 ? 'default' : 'error'}\n                      minLength={5}\n                      maxLength={5}\n                      placeholder=\"XXXXX\"\n                      value={verifyCode || ''}\n                      onChange={(value) => {\n                        setCodeResent(false);\n                        setVerifyCode(value);\n                      }}\n                    />\n                  </FormGroup>\n                </Form>\n                <TextContent>\n                  <p>\n                    No text received?{' '}\n                    <Button\n                      isInline\n                      variant={ButtonVariant.link}\n                      onClick={() => {\n                        setVerifyCode('');\n                        initiatePhoneVerification(countryCode, phoneNumber);\n                        setCodeResent(true);\n                      }}\n                    >\n                      Resend code\n                    </Button>\n                    {codeResent ? (\n                      <CheckIcon\n                        className=\"pf-u-ml-md\"\n                        style={{ color: 'var(--pf-global--success-color--100)' }}\n                      />\n                    ) : null}\n                    <br />\n                    Or{' '}\n                    <Button\n                      isInline\n                      variant={ButtonVariant.link}\n                      onClick={() => {\n                        setStep('verify');\n                        setVerifyCode('');\n                      }}\n                    >\n                      use a different phone number\n                    </Button>\n                  </p>\n                </TextContent>\n                <FooterButton\n                  isDisabled={loading || verifyCode.length !== 5}\n                  onClick={async () => {\n                    try {\n                      setLoading(true);\n                      await completePhoneVerification(verifyCode);\n                      await getSignupDataFn();\n                    } catch (e) {\n                      setError(\n                        errorMessage(e) ||\n                          'Error while sending verification code. Please try again.',\n                      );\n                    } finally {\n                      setLoading(false);\n                    }\n                  }}\n                >\n                  Next\n                </FooterButton>\n              </>\n            );\n          case 'provisioning':\n            return (\n              <>\n                <TextContent>\n                  <p>We are preparing your Sandbox. It will be available shortly.</p>\n                </TextContent>\n                <Bullseye className=\"pf-u-mt-2xl pf-u-mb-lg\">\n                  <Spinner isSVG size=\"xl\" />\n                </Bullseye>\n                <FooterButton isDisabled>Launch Sandbox</FooterButton>\n              </>\n            );\n\n          case 'pending-approval':\n            return (\n              <>\n                <TextContent>\n                  <p>Your Sandbox account is waiting for approval.</p>\n                </TextContent>\n                <Bullseye className=\"pf-u-mt-2xl pf-u-mb-lg\">\n                  <Spinner isSVG size=\"xl\" />\n                </Bullseye>\n                <FooterButton onClick={() => onClose(signupData)}>Close</FooterButton>\n              </>\n            );\n          case 'ready':\n            return (\n              <>\n                <TextContent>\n                  <p>\n                    Your Sandbox will be activate for the next 30 days. Jump right in and start\n                    building!\n                  </p>\n                </TextContent>\n                <div className=\"pf-u-p-md\">\n                  <img src={sandboxReadyImg} />\n                </div>\n                <FooterButton onClick={() => onClose(signupData)}>Launch Sandbox</FooterButton>\n              </>\n            );\n          default:\n            return null;\n        }\n      })()}\n    </Modal>\n  );\n};\n\nexport default RegistrationModal;\n","import * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport {\n  RegistrationContext,\n  RegistrationContextValue,\n  signupDataToStatus,\n} from '../utils/registration-context';\nimport { getSignupData } from '../services/registration-service';\nimport RegistrationModal from './RegistrationModal/RegistrationModal';\nimport { SignupData } from '../types';\nimport { errorMessage } from '../utils/utils';\n\nconst RegistrationProvider = ({ children }: { children?: React.ReactNode }) => {\n  // state\n  const [statusUnknown, setStatusUnknown] = React.useState(true);\n  const [signupData, setSignupData] = React.useState<SignupData>();\n  const [error, setError] = React.useState<string>();\n  const [showUserSignup, setShowUserSignup] = React.useState(false);\n\n  const status = React.useMemo(\n    () => (statusUnknown ? 'unknown' : signupDataToStatus(signupData)),\n    [statusUnknown, signupData],\n  );\n\n  const getSignupDataRef = React.useRef<() => void>();\n  getSignupDataRef.current = async () => {\n    try {\n      const data = await getSignupData();\n      if (!isEqual(data, signupData)) {\n        setSignupData(data);\n      }\n      setError(undefined);\n      setStatusUnknown(false);\n    } catch (e) {\n      setError(`An error occurred retrieving registration status. ${errorMessage(e)}`);\n      setStatusUnknown(false);\n    }\n  };\n\n  React.useEffect(() => {\n    getSignupDataRef.current?.();\n  }, []);\n\n  const pollStatus = !showUserSignup;\n  React.useEffect(() => {\n    if (pollStatus) {\n      const handle = setInterval(() => {\n        getSignupDataRef.current?.();\n      }, 10000);\n      return () => {\n        clearInterval(handle);\n      };\n    }\n  }, [pollStatus]);\n\n  const actions = React.useMemo(() => ({ setError, setSignupData, setShowUserSignup }), []);\n  const contextValue: RegistrationContextValue = React.useMemo(\n    () => [\n      {\n        error,\n        signupData,\n        showUserSignup,\n        status,\n      },\n      actions,\n    ],\n    [error, signupData, showUserSignup, status, actions],\n  );\n  return (\n    <RegistrationContext.Provider value={contextValue}>\n      {showUserSignup ? (\n        <RegistrationModal\n          initialStatus={status}\n          onClose={(newSignupData) => {\n            if (newSignupData) {\n              setSignupData(newSignupData);\n            }\n            setShowUserSignup(false);\n          }}\n        />\n      ) : null}\n      {children}\n    </RegistrationContext.Provider>\n  );\n};\n\nexport default RegistrationProvider;\n","import React, { Fragment, useEffect } from 'react';\nimport { Reducer } from 'redux';\nimport Routing from './routes/Routing';\n\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport RegistrationProvider from './components/RegistrationProvider';\n\nconst App = () => {\n  const { updateDocumentTitle } = useChrome();\n\n  useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n    // You can use directly the name of your app\n    updateDocumentTitle('Developer Sandbox');\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <RegistrationProvider>\n        <Routing />\n      </RegistrationProvider>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware, Reducer } from 'redux';\n\nexport let registry: ReducerRegistry<Reducer>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import * as React from 'react';\nimport { SignupData } from '../types';\n\n// state\nexport type Status = 'unknown' | 'new' | 'verify' | 'pending-approval' | 'provisioning' | 'ready';\nexport type RegistrationState = {\n  showUserSignup?: boolean;\n  status: Status;\n  signupData?: SignupData;\n  error?: string;\n};\n\n// actions\nexport type RegistrationActions = {\n  setShowUserSignup: (showUserSignup: boolean) => void;\n  setSignupData: (data: SignupData | undefined) => void;\n  setError: (error: string | undefined) => void;\n};\n\n// context\nexport type RegistrationContextValue = [RegistrationState, RegistrationActions];\nexport const RegistrationContext = React.createContext<RegistrationContextValue>(\n  null as unknown as RegistrationContextValue,\n);\n\nexport const signupDataToStatus = (signupData?: SignupData): Status => {\n  let status: Status;\n  if (signupData == null) {\n    status = 'new';\n  } else if (signupData.status.ready === true) {\n    status = 'ready';\n  } else if (signupData.status.ready === false && signupData.status.verificationRequired) {\n    status = 'verify';\n  } else if (signupData.status.ready === false && signupData.status.reason === 'Provisioning') {\n    status = 'provisioning';\n  } else {\n    // unknown state\n    status = 'pending-approval';\n  }\n  return status;\n};\n"],"names":["errorMessage","e","message","toString","SandboxPage","lazy","OopsPage","routes","path","element","renderRoutes","map","Element","childRoutes","elementProps","Route","key","renderedRoutes","useMemo","Suspense","fallback","Bullseye","Spinner","Navigate","replace","to","axiosInstance","interceptors","request","use","reqConfig","baseURL","window","insights","chrome","auth","getToken","then","bearerToken","headers","Accept","Authorization","signupURL","phoneVerificationURL","getSignupData","Promise","get","response","status","undefined","initiatePhoneVerification","countryCode","phoneNumber","isValidCountryCode","isValidPhoneNumber","put","country_code","phone_number","test","props","className","Button","onClose","initialStatus","url","document","querySelector","script","createElement","type","src","async","defer","head","appendChild","loadRecaptchaScript","step","setStep","error","setError","verifyCode","setVerifyCode","loading","setLoading","setCountryCode","setPhoneNumber","codeResent","setCodeResent","accepted","setAccepted","signupData","setSignupDataState","getSignupDataFn","data","ready","verificationRequired","cur","reason","setInterval","clearInterval","Modal","variant","ModalVariant","title","isOpen","Alert","AlertVariant","actionClose","AlertActionCloseButton","isInline","TextContent","Checkbox","id","isChecked","onChange","checked","ButtonVariant","component","href","target","rel","isDisabled","isLoading","onClick","resolve","reject","timeout","captchaTimeout","setTimeout","grecaptcha","enterprise","clearTimeout","execute","recaptchaApiKey","action","token","post","Form","Grid","hasGutter","GridItem","span","FormGroup","label","isRequired","TextInput","validated","placeholder","minLength","maxLength","value","length","style","color","code","isSVG","size","children","statusUnknown","setStatusUnknown","setSignupData","showUserSignup","setShowUserSignup","getSignupDataRef","current","pollStatus","actions","contextValue","newSignupData","updateDocumentTitle","useChrome","useEffect","register","notifications","Fragment","init","errorDescriptionKey","middleware","RegistrationContext","signupDataToStatus"],"sourceRoot":""}