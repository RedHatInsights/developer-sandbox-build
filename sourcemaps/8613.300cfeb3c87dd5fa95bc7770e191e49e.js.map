{"version":3,"file":"js/8613.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/routes/Routing.tsx","webpack:///./src/components/RegistrationModal/FooterButton.tsx","webpack:///./src/components/RegistrationModal/RegistrationModal.tsx","webpack:///./src/utils/const.ts","webpack:///./src/components/RegistrationProvider.tsx","webpack:///./src/hooks/useRecaptcha.ts","webpack:///./src/App.tsx","webpack:///./src/components/AnalyticsButton/AnalyticsButton.tsx","webpack:///./src/hooks/useAxios.ts","webpack:///./src/hooks/useRegistrationService.ts","webpack:///./src/hooks/useTrackEvent.ts","webpack:///./src/services/registration-service.ts","webpack:///./src/state/registrationAtom.ts","webpack:///./src/utils/recaptcha.ts","webpack:///./src/utils/registration-context.ts","webpack:///./src/utils/utils.ts"],"sourcesContent":["import React, { Suspense, lazy, useMemo } from 'react';\nimport { Navigate, Route as RouterRoute, Routes as RouterRoutes } from 'react-router-dom';\nimport { Bullseye } from '@patternfly/react-core/dist/dynamic/layouts/Bullseye';\nimport { Spinner } from '@patternfly/react-core/dist/dynamic/components/Spinner';\nimport { linkBasename } from '../utils/utils';\n\nconst SandboxPage = lazy(\n  () => import(/* webpackChunkName: \"SandboxPage\" */ './SandboxPage/SandboxPage'),\n);\nconst NoPermissionsPage = lazy(\n  () => import(/* webpackChunkName: \"NoPermissionsPage\" */ './NoPermissionsPage/NoPermissionsPage'),\n);\n\nconst ExperimentalPage = lazy(\n  () => import(/* webpackChunkName: \"ExperimentalPage\" */ './ExperimentalPage/ExperimentalPage'),\n);\n\nconst SHOW_EXPERIMENTAL = localStorage.getItem('dev-sandbox.experimental') === 'true';\n\nconst routes = [\n  {\n    path: 'no-permissions',\n    element: NoPermissionsPage,\n  },\n  {\n    path: '/',\n    element: SandboxPage,\n  },\n];\n\n// enable this route by running localStorage.setItem('dev-sandbox.experimental', 'true') in browser console\n// and refresh the browser\nif (SHOW_EXPERIMENTAL) {\n  routes.push({\n    path: 'experimental',\n    element: ExperimentalPage,\n  });\n}\n\ninterface RouteType {\n  path?: string;\n  element: React.ComponentType;\n  childRoutes?: RouteType[];\n  elementProps?: Record<string, unknown>;\n}\n\nconst renderRoutes = (routes: RouteType[] = []) =>\n  routes.map(({ path, element: Element, childRoutes, elementProps }) => (\n    <RouterRoute key={path} path={path} element={<Element {...elementProps} />}>\n      {renderRoutes(childRoutes)}\n    </RouterRoute>\n  ));\n\nconst Routing = () => {\n  const renderedRoutes = useMemo(() => renderRoutes(routes), [routes]);\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      <RouterRoutes>\n        {renderedRoutes}\n        <RouterRoute path=\"*\" element={<Navigate replace to={linkBasename} />} />\n      </RouterRoutes>\n    </Suspense>\n  );\n};\n\nexport default Routing;\n","import { Button } from '@patternfly/react-core/dist/dynamic/components/Button';\nimport * as React from 'react';\n\nconst FooterButton = (\n  props: Pick<\n    React.ComponentProps<typeof Button>,\n    'children' | 'onClick' | 'isDisabled' | 'isLoading'\n  >,\n) => (\n  <div className=\"pf-u-pt-xl pf-u-pt-md pf-u-text-align-center\">\n    <Button {...props} className=\"pf-u-w-100 pf-u-w-initial-on-sm\" />\n  </div>\n);\n\nexport default FooterButton;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core/dist/dynamic/components/Alert';\nimport { AlertActionCloseButton } from '@patternfly/react-core/dist/dynamic/components/Alert';\nimport { AlertVariant } from '@patternfly/react-core/dist/dynamic/components/Alert';\nimport { Bullseye } from '@patternfly/react-core/dist/dynamic/layouts/Bullseye';\nimport { Button } from '@patternfly/react-core/dist/dynamic/components/Button';\nimport { ButtonVariant } from '@patternfly/react-core/dist/dynamic/components/Button';\nimport { Form } from '@patternfly/react-core/dist/dynamic/components/Form';\nimport { FormGroup } from '@patternfly/react-core/dist/dynamic/components/Form';\nimport { Grid } from '@patternfly/react-core/dist/dynamic/layouts/Grid';\nimport { GridItem } from '@patternfly/react-core/dist/dynamic/layouts/Grid';\nimport { Modal } from '@patternfly/react-core/dist/dynamic/components/Modal';\nimport { Spinner } from '@patternfly/react-core/dist/dynamic/components/Spinner';\nimport { Text } from '@patternfly/react-core/dist/dynamic/components/Text';\nimport { TextContent } from '@patternfly/react-core/dist/dynamic/components/Text';\nimport { TextInput } from '@patternfly/react-core/dist/dynamic/components/TextInput';\nimport { TextVariants } from '@patternfly/react-core/dist/dynamic/components/Text';\nimport { Title } from '@patternfly/react-core/dist/dynamic/components/Title';\nimport { CheckIcon } from '@patternfly/react-icons/dist/esm/icons/check-icon';\nimport FooterButton from './FooterButton';\nimport { isValidCountryCode, isValidPhoneNumber } from '../../services/registration-service';\nimport sandboxReadyImg from '../../images/launch-sandbox-success.svg';\nimport { errorMessage } from '../../utils/utils';\nimport { SignupData } from '../../types';\nimport { Status } from '../../utils/registration-context';\nimport { useTrackEvent } from '../../hooks/useTrackEvent';\nimport AnalyticsButton from '../AnalyticsButton/AnalyticsButton';\nimport { SHORT_INTERVAL } from '../../utils/const';\nimport useRegistrationService from '../../hooks/useRegistrationService';\n\ntype Props = {\n  initialStatus?: Status;\n  onClose: (signupData?: SignupData) => void;\n};\n\nconst RegistrationModal = ({ onClose, initialStatus }: Props) => {\n  const track = useTrackEvent();\n\n  const { completePhoneVerification, getSignupData, initiatePhoneVerification, signup } =\n    useRegistrationService();\n\n  const [step, setStep] = React.useState<\n    'new' | 'ready' | 'provisioning' | 'verify' | 'verifyCode' | 'pending-approval'\n  >(initialStatus && initialStatus !== 'unknown' ? initialStatus : 'new');\n  const [error, setError] = React.useState<string | undefined>();\n  const [verifyCode, setVerifyCode] = React.useState('');\n  const [loading, setLoading] = React.useState(false);\n  const [countryCode, setCountryCode] = React.useState('');\n  const [phoneNumber, setPhoneNumber] = React.useState('');\n  const [codeResent, setCodeResent] = React.useState(false);\n\n  const [signupData, setSignupDataState] = React.useState<SignupData>();\n\n  const getSignupDataFn = React.useCallback(async () => {\n    try {\n      const data = await getSignupData();\n      setSignupDataState(data);\n      if (data == null) {\n        setStep('new');\n      } else if (data.status.ready === true) {\n        setStep('ready');\n      } else if (data.status.ready === false && data.status.verificationRequired) {\n        setStep((cur) => (cur !== 'verify' && cur !== 'verifyCode' ? 'verify' : cur));\n      } else if (data.status.ready === false && data.status.reason === 'Provisioning') {\n        setStep('provisioning');\n      } else {\n        setStep('pending-approval');\n      }\n    } catch (e) {\n      setError(errorMessage(e));\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (step === 'provisioning' || step === 'pending-approval') {\n      const handle = setInterval(getSignupDataFn, SHORT_INTERVAL);\n      return () => {\n        clearInterval(handle);\n      };\n    }\n  }, [step]);\n\n  React.useEffect(() => {\n    if (error) {\n      track('DevSandbox Signup Error', {\n        error,\n      });\n    }\n  }, [error]);\n\n  React.useEffect(() => {\n    track('DevSandbox Signup Step', {\n      step,\n    });\n  }, [step]);\n\n  return (\n    <Modal\n      data-testid=\"registration-modal\"\n      width={600}\n      aria-labelledby=\"registration-modal-title\"\n      header={\n        // custom title to prevent ellipsis overflow on small screens\n        <Title id=\"registration-modal-title\" headingLevel=\"h1\">\n          {step === 'ready'\n            ? \"Congratulations, you're ready to get started!\"\n            : 'Activate your free 30 days trial'}\n        </Title>\n      }\n      isOpen\n      onClose={() => onClose(signupData)}\n    >\n      {error ? (\n        <Alert\n          title=\"An error occurred\"\n          variant={AlertVariant.danger}\n          actionClose={<AlertActionCloseButton onClose={() => setError(undefined)} />}\n          isInline\n          className=\"pf-u-mb-lg\"\n        >\n          {error}\n        </Alert>\n      ) : null}\n      {(() => {\n        switch (step) {\n          case 'new':\n            return (\n              <FooterButton\n                isDisabled={loading}\n                isLoading={loading}\n                onClick={async () => {\n                  try {\n                    setError(undefined);\n                    setLoading(true);\n                    await signup();\n                    await getSignupDataFn();\n                  } catch (e) {\n                    setError(errorMessage(e));\n                  } finally {\n                    setLoading(false);\n                  }\n                }}\n              >\n                Activate\n              </FooterButton>\n            );\n          case 'verify':\n            return (\n              <>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    We are preparing your Sandbox. It will be available shortly.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    One more thing, to ensure your account is secure please enter a valid phone\n                    number for SMS verification.\n                  </Text>\n                </TextContent>\n                <Form>\n                  <Grid hasGutter className=\"pf-u-mt-md\" style={{ alignItems: 'end' }}>\n                    <GridItem span={3}>\n                      <FormGroup label=\"Country code\" isRequired>\n                        <TextInput\n                          aria-label=\"Country code\"\n                          isRequired\n                          validated={\n                            !countryCode || isValidCountryCode(countryCode) ? 'default' : 'error'\n                          }\n                          type=\"text\"\n                          placeholder=\"+01\"\n                          minLength={1}\n                          maxLength={4}\n                          value={countryCode}\n                          onChange={(_, value) => {\n                            setError(undefined);\n                            setCountryCode(value);\n                          }}\n                        />\n                      </FormGroup>\n                    </GridItem>\n                    <GridItem span={9}>\n                      <FormGroup label=\"Phone number\" isRequired>\n                        <TextInput\n                          aria-label=\"Phone number\"\n                          isRequired\n                          validated={\n                            !phoneNumber || isValidPhoneNumber(phoneNumber) ? 'default' : 'error'\n                          }\n                          type=\"tel\"\n                          placeholder=\"123-456-7890\"\n                          minLength={6}\n                          maxLength={32}\n                          value={phoneNumber}\n                          onChange={(_, value) => {\n                            setError(undefined);\n                            setPhoneNumber(value);\n                          }}\n                        />\n                      </FormGroup>\n                    </GridItem>\n                  </Grid>\n                </Form>\n                <FooterButton\n                  isDisabled={\n                    loading || !isValidCountryCode(countryCode) || !isValidPhoneNumber(phoneNumber)\n                  }\n                  isLoading={loading}\n                  onClick={async () => {\n                    try {\n                      setError(undefined);\n                      setLoading(true);\n                      await initiatePhoneVerification(countryCode, phoneNumber);\n                      setStep('verifyCode');\n                    } catch (e) {\n                      setError(errorMessage(e));\n                    } finally {\n                      setLoading(false);\n                    }\n                  }}\n                >\n                  Next\n                </FooterButton>\n              </>\n            );\n          case 'verifyCode':\n            return (\n              <>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    We are preparing your Sandbox. It will be available shortly.\n                  </Text>\n                  <Text component={TextVariants.p}>\n                    We sent a verification code to \"<b>{`${countryCode} ${phoneNumber}`}</b>\"\n                  </Text>\n                </TextContent>\n                <Form>\n                  <FormGroup label=\"Verification code\" isRequired className=\"pf-u-mt-md pf-u-mb-md\">\n                    <TextInput\n                      aria-label=\"Veritification code\"\n                      isRequired\n                      validated={!verifyCode || verifyCode.length === 6 ? 'default' : 'error'}\n                      minLength={6}\n                      maxLength={6}\n                      placeholder=\"XXXXXX\"\n                      value={verifyCode || ''}\n                      onChange={(_, value) => {\n                        setError(undefined);\n                        setCodeResent(false);\n                        setVerifyCode(value);\n                      }}\n                    />\n                  </FormGroup>\n                </Form>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    No text received?{' '}\n                    <AnalyticsButton\n                      isInline\n                      variant={ButtonVariant.link}\n                      onClick={() => {\n                        setError(undefined);\n                        setVerifyCode('');\n                        initiatePhoneVerification(countryCode, phoneNumber);\n                        setCodeResent(true);\n                      }}\n                      analytics={{\n                        event: 'DevSandbox Signup Resend Code',\n                      }}\n                    >\n                      Resend code\n                    </AnalyticsButton>\n                    {codeResent ? (\n                      <CheckIcon\n                        className=\"pf-u-ml-md\"\n                        style={{ color: 'var(--pf-global--success-color--100)' }}\n                      />\n                    ) : null}\n                    <br />\n                    Or{' '}\n                    <Button\n                      isInline\n                      variant={ButtonVariant.link}\n                      onClick={() => {\n                        setError(undefined);\n                        setStep('verify');\n                        setVerifyCode('');\n                      }}\n                    >\n                      use a different phone number\n                    </Button>\n                  </Text>\n                </TextContent>\n                <FooterButton\n                  isDisabled={loading || verifyCode.length !== 6}\n                  isLoading={loading}\n                  onClick={async () => {\n                    try {\n                      setError(undefined);\n                      setLoading(true);\n                      await completePhoneVerification(verifyCode);\n                      await getSignupDataFn();\n                    } catch (e) {\n                      setError(\n                        errorMessage(e) ||\n                          'Error while sending verification code. Please try again.',\n                      );\n                    } finally {\n                      setLoading(false);\n                    }\n                  }}\n                >\n                  Next\n                </FooterButton>\n              </>\n            );\n          case 'provisioning':\n            return (\n              <>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    We are preparing your Sandbox. It will be available shortly.\n                  </Text>\n                </TextContent>\n                <Bullseye className=\"pf-u-mt-2xl pf-u-mb-lg\">\n                  <Spinner size=\"xl\" />\n                </Bullseye>\n                <FooterButton isDisabled>Launch Sandbox</FooterButton>\n              </>\n            );\n\n          case 'pending-approval':\n            return (\n              <>\n                <TextContent>\n                  <p>Your Sandbox account is waiting for approval.</p>\n                </TextContent>\n                <Bullseye className=\"pf-u-mt-2xl pf-u-mb-lg\">\n                  <Spinner size=\"xl\" />\n                </Bullseye>\n                <FooterButton onClick={() => onClose(signupData)}>Close</FooterButton>\n              </>\n            );\n          case 'ready':\n            return (\n              <>\n                <TextContent>\n                  <Text component={TextVariants.p}>\n                    Your Sandbox is now active. It will be available for next 30 days. Jump right in\n                    and start creating your applications!\n                  </Text>\n                </TextContent>\n                <div className=\"pf-u-p-md\">\n                  <img src={sandboxReadyImg} />\n                </div>\n                <FooterButton onClick={() => onClose(signupData)}>Got it</FooterButton>\n              </>\n            );\n          default:\n            return null;\n        }\n      })()}\n    </Modal>\n  );\n};\n\nexport default RegistrationModal;\n","export const SHORT_INTERVAL = 2000;\nexport const LONG_INTERVAL = 20000;\n","import * as React from 'react';\nimport isEqual from 'lodash/isEqual';\nimport {\n  RegistrationContext,\n  RegistrationContextValue,\n  signupDataToStatus,\n} from '../utils/registration-context';\nimport RegistrationModal from './RegistrationModal/RegistrationModal';\nimport { SignupData } from '../types';\nimport { errorMessage } from '../utils/utils';\nimport { useTrackEvent } from '../hooks/useTrackEvent';\nimport { useRecaptcha } from '../hooks/useRecaptcha';\nimport { LONG_INTERVAL, SHORT_INTERVAL } from '../utils/const';\nimport useRegistrationService from '../hooks/useRegistrationService';\nimport { useSetAtom } from 'jotai';\nimport { registrationSignUpData } from '../state/registrationAtom';\n\nconst RegistrationProvider = ({ children }: { children?: React.ReactNode }) => {\n  useRecaptcha();\n  const setSignUpData = useSetAtom(registrationSignUpData);\n  const track = useTrackEvent();\n  const { getSignupData } = useRegistrationService();\n\n  // state\n  const [statusUnknown, setStatusUnknown] = React.useState(true);\n  const [signupData, setSignupData] = React.useState<SignupData>();\n  const [error, setError] = React.useState<string>();\n  const [showUserSignup, setShowUserSignup] = React.useState(false);\n  const [showModalOnReady, setShowModalOnReady] = React.useState(false);\n\n  const status = React.useMemo(\n    () => (statusUnknown ? 'unknown' : signupDataToStatus(signupData)),\n    [statusUnknown, signupData],\n  );\n\n  React.useEffect(() => {\n    // send event when signup status is first established and upon change\n    if (!statusUnknown) {\n      track('DevSandbox Signup Status', {\n        status,\n      });\n    }\n  }, [statusUnknown, status]);\n\n  const getSignupDataRef = React.useRef<() => void>();\n  getSignupDataRef.current = async () => {\n    try {\n      const data = await getSignupData();\n      if (!isEqual(data, signupData)) {\n        setSignupData(data);\n      }\n      setError(undefined);\n      setStatusUnknown(false);\n    } catch (e) {\n      setError(`An error occurred retrieving registration status. ${errorMessage(e)}`);\n      setStatusUnknown(false);\n    }\n  };\n\n  const refreshSignupData = React.useCallback(async () => getSignupDataRef.current?.(), []);\n\n  React.useEffect(() => {\n    getSignupDataRef.current?.();\n  }, []);\n\n  const pollStatus = !showUserSignup;\n  const pollInterval = status === 'provisioning' ? SHORT_INTERVAL : LONG_INTERVAL;\n  React.useEffect(() => {\n    if (pollStatus) {\n      const handle = setInterval(() => {\n        getSignupDataRef.current?.();\n      }, pollInterval);\n      return () => {\n        clearInterval(handle);\n      };\n    }\n  }, [pollStatus, pollInterval]);\n\n  const actions = React.useMemo(\n    () => ({ setError, setSignupData, setShowUserSignup, refreshSignupData }),\n    [refreshSignupData],\n  );\n\n  const contextValue: RegistrationContextValue = React.useMemo(\n    () => [\n      {\n        error,\n        signupData,\n        showUserSignup,\n        status,\n      },\n      actions,\n    ],\n    [error, signupData, showUserSignup, status, actions],\n  );\n\n  React.useEffect(() => {\n    setSignUpData(signupData);\n  }, [signupData]);\n\n  React.useEffect(() => {\n    if (status === 'ready' && showModalOnReady) {\n      // when signup status transitions to ready, show the modal\n      setShowUserSignup(true);\n    } else if (status !== 'ready' && !showModalOnReady && !statusUnknown) {\n      // when signup status transitions from ready, prepare to show the modal\n      setShowModalOnReady(true);\n    }\n  }, [status]);\n\n  return (\n    <RegistrationContext.Provider value={contextValue}>\n      {showUserSignup ? (\n        <RegistrationModal\n          initialStatus={status}\n          onClose={(newSignupData) => {\n            track('DevSandbox Signup Closed');\n            if (newSignupData) {\n              setSignupData(newSignupData);\n            }\n            setShowUserSignup(false);\n          }}\n        />\n      ) : null}\n      {children}\n    </RegistrationContext.Provider>\n  );\n};\n\nexport default RegistrationProvider;\n","import * as React from 'react';\nimport { loadRecaptchaScript } from '../utils/recaptcha';\n\nexport const useRecaptcha = () => {\n  React.useEffect(() => {\n    loadRecaptchaScript();\n  }, []);\n};\n","import React, { Fragment, useEffect } from 'react';\nimport Routing from './routes/Routing';\n\nimport './App.scss';\n\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport RegistrationProvider from './components/RegistrationProvider';\n\nconst App = () => {\n  const { updateDocumentTitle } = useChrome();\n\n  useEffect(() => {\n    // You can use directly the name of your app\n    updateDocumentTitle('Developer Sandbox');\n  }, []);\n\n  return (\n    <Fragment>\n      <RegistrationProvider>\n        <Routing />\n      </RegistrationProvider>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core/dist/dynamic/components/Button';\nimport { AnalyticProps, useTrackEvent } from '../../hooks/useTrackEvent';\n\nconst AnalyticsButton: React.FC<\n  React.ComponentProps<typeof Button> & {\n    analytics?: AnalyticProps;\n  }\n> = ({ onClick, analytics, ...props }) => {\n  const track = useTrackEvent();\n  return (\n    <Button\n      {...props}\n      onClick={\n        analytics\n          ? (...args) => {\n              track(analytics.event, analytics.properties);\n              onClick?.(...args);\n            }\n          : onClick\n      }\n    />\n  );\n};\n\nexport default AnalyticsButton;\n","import * as React from 'react';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport axios, { AxiosRequestConfig } from 'axios';\n\nconst registrationBaseURL =\n  'https://registration-service-toolchain-host-operator.apps.sandbox.x8i5.p1.openshiftapps.com';\n\nconst kubeBaseUrl = 'https://api-toolchain-host-operator.apps.sandbox.x8i5.p1.openshiftapps.com';\n\nexport enum InstanceAPI {\n  REGISTRATION,\n  KUBE_API,\n}\n\nconst instanceBaseUrlMap = {\n  [InstanceAPI.REGISTRATION]: registrationBaseURL,\n  [InstanceAPI.KUBE_API]: kubeBaseUrl,\n};\n\nexport const useAxios = (instanceType: InstanceAPI) => {\n  const { auth } = useChrome();\n\n  return React.useMemo(() => {\n    const axiosInstance = axios.create();\n    axiosInstance.interceptors.request.use((reqConfig: AxiosRequestConfig) => ({\n      baseURL: instanceBaseUrlMap[instanceType],\n      ...reqConfig,\n    }));\n\n    axiosInstance.interceptors.request.use((reqConfig: AxiosRequestConfig) => {\n      return auth.getToken().then((bearerToken) => {\n        if (!bearerToken) {\n          return reqConfig;\n        }\n        return {\n          ...reqConfig,\n          headers: {\n            Accept: 'application/json',\n            Authorization: `Bearer ${bearerToken}`,\n            ...reqConfig.headers,\n          },\n        };\n      });\n    });\n    return axiosInstance;\n  }, [auth]);\n};\n\nexport default useAxios;\n","import {\n  completePhoneVerification,\n  getSignupData,\n  initiatePhoneVerification,\n  signup,\n} from '../services/registration-service';\nimport useAxios, { InstanceAPI } from './useAxios';\n\nconst useRegistrationService = () => {\n  const axiosInstance = useAxios(InstanceAPI.REGISTRATION);\n\n  return {\n    getSignupData: () => getSignupData(axiosInstance),\n\n    signup: () => signup(axiosInstance),\n\n    initiatePhoneVerification: async (countryCode: string, phoneNumber: string) =>\n      initiatePhoneVerification(axiosInstance, countryCode, phoneNumber),\n\n    completePhoneVerification: async (code: string) =>\n      completePhoneVerification(axiosInstance, code),\n  };\n};\n\nexport default useRegistrationService;\n","import * as React from 'react';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\ntype JSONValue = string | number | boolean | JSONObject | Array<JSONValue>;\n\ninterface JSONObject {\n  [x: string]: JSONValue;\n}\n\nexport type AnalyticProps = {\n  event: string;\n  properties?: JSONObject;\n};\n\nexport const useTrackEvent = () => {\n  const { analytics } = useChrome();\n  return React.useCallback(\n    (event: string, properties?: JSONObject) => {\n      if (process.env.NODE_ENV !== 'development') {\n        analytics?.track(event, properties);\n      } else {\n        // eslint-disable-next-line no-console\n        console.log('analytics.track', event, properties);\n      }\n    },\n    [analytics],\n  );\n};\n","import axios, { AxiosInstance } from 'axios';\nimport { recaptchaApiKey } from '../utils/recaptcha';\nimport { SignupData } from '../types';\n\n// signup endpoint\nconst signupURL = '/api/v1/signup';\n\n// phone verification endpoint\nconst phoneVerificationURL = '/api/v1/signup/verification';\n\nexport const getSignupData = async (\n  axiosInstance: AxiosInstance,\n): Promise<SignupData | undefined> => {\n  try {\n    const { data } = await axiosInstance.get<SignupData>(signupURL);\n    return data;\n  } catch (e) {\n    if (axios.isAxiosError(e)) {\n      if (e.response?.status === 404) {\n        return undefined;\n      }\n    }\n    throw e;\n  }\n};\n\nconst getRecaptchaToken = async (): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const apiKey = recaptchaApiKey;\n    let timeout = false;\n    const captchaTimeout = setTimeout(() => {\n      timeout = true;\n      reject('Recaptcha timeout.');\n    }, 10000);\n    if (grecaptcha?.enterprise) {\n      grecaptcha.enterprise.ready(async () => {\n        if (!timeout) {\n          clearTimeout(captchaTimeout);\n          try {\n            resolve(\n              await grecaptcha.enterprise.execute(apiKey, {\n                action: 'SIGNUP',\n              }),\n            );\n          } catch (e) {\n            reject('Recaptcha failure.');\n          }\n        }\n      });\n    } else {\n      reject('Recaptcha failure.');\n    }\n  });\n};\n\nexport const signup = async (axiosInstance: AxiosInstance) => {\n  const token = await getRecaptchaToken();\n  await axiosInstance.post(signupURL, null, {\n    headers: {\n      'Recaptcha-Token': token,\n    },\n  });\n};\n\nexport const initiatePhoneVerification = async (\n  axiosInstance: AxiosInstance,\n  countryCode: string,\n  phoneNumber: string,\n) => {\n  if (!isValidCountryCode(countryCode)) {\n    throw 'Invalid country code.';\n  }\n  if (!isValidPhoneNumber(phoneNumber)) {\n    throw 'Invalid phone number.';\n  }\n  await axiosInstance.put(phoneVerificationURL, {\n    country_code: countryCode,\n    phone_number: phoneNumber,\n  });\n};\n\nexport const completePhoneVerification = async (axiosInstance: AxiosInstance, code: string) => {\n  await axiosInstance.get(`${phoneVerificationURL}/${code}`);\n};\n\nexport const isValidCountryCode = (countryCode: string) => /^[+]?[0-9]+$/.test(countryCode);\nexport const isValidPhoneNumber = (phoneNumber: string) =>\n  /^[(]?[0-9]+[)]?[-\\s.]?[0-9]+[-\\s./0-9]*$/im.test(phoneNumber);\n","import { atom } from 'jotai';\nimport { SignupData } from '../types';\n\nexport const registrationSignUpData = atom<SignupData | undefined>(undefined);\n","export const recaptchaApiKey =\n  process.env.NODE_ENV === 'test' ? 'test-api-key' : '6Lc_164lAAAAAPvrC0WO-XDljvZ2DZ3UQ38A4XR0';\n\nexport const loadRecaptchaScript = (): void => {\n  if (recaptchaApiKey) {\n    const url = `https://www.google.com/recaptcha/enterprise.js?render=${recaptchaApiKey}`;\n    const recaptchaScriptNode = document.querySelector(`script[src=\"${url}\"]`);\n    if (!recaptchaScriptNode) {\n      const script = document.createElement('script');\n      script.type = 'text/javascript';\n      script.src = url;\n      script.async = true;\n      script.defer = true;\n\n      document.head.appendChild(script);\n    }\n  }\n};\n","import * as React from 'react';\nimport { SignupData } from '../types';\n\n// state\nexport type Status = 'unknown' | 'new' | 'verify' | 'pending-approval' | 'provisioning' | 'ready';\nexport type RegistrationState = {\n  showUserSignup?: boolean;\n  status: Status;\n  signupData?: SignupData;\n  error?: string;\n};\n\n// actions\nexport type RegistrationActions = {\n  refreshSignupData: () => Promise<void>;\n  setShowUserSignup: (showUserSignup: boolean) => void;\n  setSignupData: (data: SignupData | undefined) => void;\n  setError: (error: string | undefined) => void;\n};\n\n// context\nexport type RegistrationContextValue = [RegistrationState, RegistrationActions];\nexport const RegistrationContext = React.createContext<RegistrationContextValue>(\n  null as unknown as RegistrationContextValue,\n);\n\nexport const signupDataToStatus = (signupData?: SignupData): Status => {\n  let status: Status;\n  if (signupData == null) {\n    status = 'new';\n  } else if (signupData.status.ready === true) {\n    status = 'ready';\n  } else if (signupData.status.ready === false && signupData.status.verificationRequired) {\n    status = 'verify';\n  } else if (signupData.status.ready === false && signupData.status.reason === 'Provisioning') {\n    status = 'provisioning';\n  } else {\n    // unknown state\n    status = 'pending-approval';\n  }\n  return status;\n};\n","import axios from 'axios';\nimport { To } from 'react-router-dom';\n\nexport const linkBasename = '/openshift/sandbox';\nexport const mergeToBasename = (to: To, basename: string): To => {\n  if (typeof to === 'string') {\n    // replace possible \"//\" after basename\n    return `${basename}/${to}`.replace(`^${basename}//`, '/');\n  }\n\n  return {\n    ...to,\n    pathname: `${basename}/${to.pathname}`.replace(`^${basename}//`, '/'),\n  };\n};\n\nexport const errorMessage = (e: unknown): string =>\n  (axios.isAxiosError(e)\n    ? (e.response?.data as { message?: string })?.message || e.message\n    : typeof e === 'object'\n    ? e?.toString()\n    : typeof e === 'string'\n    ? e\n    : '') || '';\n"],"names":["SandboxPage","lazy","NoPermissionsPage","ExperimentalPage","SHOW_EXPERIMENTAL","localStorage","getItem","routes","path","element","push","renderRoutes","map","Element","childRoutes","elementProps","Route","key","renderedRoutes","useMemo","Suspense","fallback","Bullseye","Spinner","Navigate","replace","to","props","className","Button","onClose","initialStatus","track","useTrackEvent","completePhoneVerification","getSignupData","initiatePhoneVerification","signup","useRegistrationService","step","setStep","error","setError","verifyCode","setVerifyCode","loading","setLoading","countryCode","setCountryCode","phoneNumber","setPhoneNumber","codeResent","setCodeResent","signupData","setSignupDataState","getSignupDataFn","async","data","status","ready","verificationRequired","cur","reason","e","handle","setInterval","clearInterval","Modal","width","header","Title","id","headingLevel","isOpen","Alert","title","variant","AlertVariant","danger","actionClose","AlertActionCloseButton","undefined","isInline","isDisabled","isLoading","onClick","TextContent","Text","component","TextVariants","p","Form","Grid","hasGutter","style","alignItems","GridItem","span","FormGroup","label","isRequired","TextInput","validated","type","placeholder","minLength","maxLength","value","onChange","_","length","AnalyticsButton","ButtonVariant","link","analytics","event","CheckIcon","color","size","src","children","setSignUpData","statusUnknown","setStatusUnknown","setSignupData","showUserSignup","setShowUserSignup","showModalOnReady","setShowModalOnReady","getSignupDataRef","current","refreshSignupData","pollStatus","pollInterval","actions","contextValue","Provider","newSignupData","updateDocumentTitle","useChrome","useEffect","Fragment","args","properties","InstanceAPI","instanceBaseUrlMap","REGISTRATION","KUBE_API","instanceType","auth","axiosInstance","interceptors","request","use","reqConfig","baseURL","getToken","then","bearerToken","headers","Accept","Authorization","code","signupURL","phoneVerificationURL","get","response","token","Promise","resolve","reject","apiKey","r","timeout","captchaTimeout","setTimeout","grecaptcha","enterprise","clearTimeout","execute","action","getRecaptchaToken","post","isValidCountryCode","isValidPhoneNumber","put","country_code","phone_number","test","registrationSignUpData","recaptchaApiKey","loadRecaptchaScript","url","document","querySelector","script","createElement","defer","head","appendChild","RegistrationContext","signupDataToStatus","linkBasename","errorMessage","message","toString"],"sourceRoot":""}