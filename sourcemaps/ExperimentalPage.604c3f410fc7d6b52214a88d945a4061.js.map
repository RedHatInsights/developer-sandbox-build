{"version":3,"file":"js/ExperimentalPage.fe15c89b90b98e9e084f.js","mappings":"2IAGaA,EAAyB,WAAM,oBAAiB,IAAjB,C,0FCQ5C,QARmB,WACjB,IAAMC,GAAgB,EAAAC,EAAA,IAAS,KAAYC,UAE3C,MAAO,CACLC,eAAgB,SAACC,GAAsB,OC+Bb,SAAOJ,EAA8BI,GAAiB,O,OAAA,E,OAAA,E,EAAA,W,gnCAEjE,OADXC,EArCR,SAA8BD,GAC5B,MAAO,mCAA4BA,EAAS,gBAC9C,CAmCcE,CAAqBF,GAChB,GAAMJ,EAAcO,IAAoBF,I,OACzD,MAAO,CAAP,EADiB,SAA4C,M,iBAFqB,K,8QD/BzCF,CAAeH,EAAeI,EAA9B,EAE3C,E,kCEHaI,IAFkB,QAAuB,KAEpB,aAEhCC,IAEWC,GAAsB,SAAK,SAAOH,GAAG,O,OAAA,E,OAAA,E,EAAA,W,knCAEhD,OADMJ,EAAiBI,EAAIC,KAIrBG,EAAaJ,EAAI,KACvBK,QAAQC,IAAI,CAAEF,WAAU,IACnBA,EAIc,GAAMR,EAAeQ,EAAWG,uBAH1C,CAAP,OAAOL,IALA,CAAP,OAAOA,G,OAST,MAAO,CAAP,EADmB,U,iBAX6B,K,iRCN5CM,EAAmB,WACvB,IAAMC,ECCsB,WACnB,IAAAC,GAAY,EAAAlB,EAAA,KAAwB,UACrCI,EAAmB,IAAY,eACjCe,GAAiB,QAAWV,GAC5BQ,GAAc,QAAaN,GAMjC,OALA,IAAAS,YAAU,WACO,UAAXF,GAAsBd,GACxBe,GAAe,WAAM,OAAAf,CAAA,GAEzB,GAAG,CAACA,EAAeiB,WAAYH,IACxBD,CACT,CDZsBK,GACXC,GAAgB,EAAAvB,EAAA,KAAwB,cAC3CwB,GACJD,aAAU,EAAVA,EAAYE,cAAcF,aAAU,EAAVA,EAAYR,sBAClC,UAAGQ,EAAWE,WAAU,uBAAeF,EAAWR,qBAAoB,eACtEQ,aAAU,EAAVA,EAAYE,WACZC,GAAO,IAAAC,UAAQ,W,MACnB,OAqBI,QApBF,EAAAV,aAAW,EAAXA,EAAaW,MAAMC,KAAI,SAACC,G,QACtB,OACE,wBAAIC,IAAKD,EAAKE,SAASC,MACrB,4BAAKH,EAAKE,SAASE,MACnB,4BAAKJ,EAAKE,SAASG,mBAEnB,4BAAKL,EAAKM,KAAKC,SAASL,SAASM,OAAOC,KACxC,4BAAKT,EAAKM,KAAKC,SAASL,SAASM,OAAOE,YACxC,4BACgF,QAA7E,EAAuE,QAAvE,EAAAV,EAAKZ,OAAOuB,WAAWC,MAAK,SAACC,GAAc,MAAqB,SAArBA,EAAUzB,MAAV,WAA4B,eAAE0B,YAAI,QAC5E,WAEJ,4BAAKd,EAAKM,KAAKS,UACf,4BACE,uBAAGC,OAAO,SAASC,KAAMvB,EAAWwB,IAAI,cAAY,SAM5D,WAAE,QAAI,EAEV,GAAG,CAAC/B,IACJ,OACE,+BACE,+BACE,4BACE,oCACA,0CACA,gDACA,+CACA,sCACA,8CACA,sCAGJ,+BAAQS,GAGd,EAUA,QAR+B,WAC7B,OACE,kBAAC,EAAAuB,SAAQ,CAACC,SAAS,uBACjB,kBAAClC,EAAgB,MAGvB,C","sources":["webpack:///./src/hooks/useRegistrationContext.ts","webpack:///./src/hooks/useKubeApi.ts","webpack:///./src/services/kube-api.ts","webpack:///./src/state/deploymentsAtom.ts","webpack:///./src/routes/ExperimentalPage/ExperimentalPage.tsx","webpack:///./src/hooks/useDeployments.ts"],"sourcesContent":["import * as React from 'react';\nimport { RegistrationContext } from '../utils/registration-context';\n\nexport const useRegistrationContext = () => React.useContext(RegistrationContext);\n","import { getDeployments } from '../services/kube-api';\nimport useAxios, { InstanceAPI } from './useAxios';\n\nconst useKubeApi = () => {\n  const axiosInstance = useAxios(InstanceAPI.KUBE_API);\n\n  return {\n    getDeployments: (namespace: string) => getDeployments(axiosInstance, namespace),\n  };\n};\n\nexport default useKubeApi;\n","import { AxiosInstance } from 'axios';\n\nfunction projectDeploymentUrl(namespace: string) {\n  return `/apis/apps/v1/namespaces/${namespace}/deployments `;\n}\n\nexport type DeploymentItem = {\n  status: {\n    conditions: {\n      type: string;\n      status: string;\n    }[];\n  };\n  spec: {\n    replicas: number;\n    template: {\n      metadata: {\n        labels: {\n          app: string;\n          deployment: string;\n        };\n      };\n    };\n  };\n  metadata: {\n    name: string;\n    uuid: string;\n    creationTimestamp: string;\n    labels: {\n      app: string;\n    };\n  };\n};\n\nexport type DeploymentData = {\n  items: DeploymentItem[];\n};\n\nexport const getDeployments = async (axiosInstance: AxiosInstance, namespace: string) => {\n  const url = projectDeploymentUrl(namespace);\n  const { data } = await axiosInstance.get<DeploymentData>(url);\n  return data;\n};\n","import { atom } from 'jotai';\nimport { DeploymentData, DeploymentItem } from '../services/kube-api';\nimport { registrationSignUpData } from './registrationAtom';\n\nexport const deploymentsAtom = atom<DeploymentItem[]>([]);\n\nexport const getDeploymentsAtom = atom<\n  ((namespace: string) => Promise<DeploymentData>) | undefined\n>(undefined);\n\nexport const loadDeploymentsAtom = atom(async (get) => {\n  const getDeployments = get(getDeploymentsAtom);\n  if (!getDeployments) {\n    return undefined;\n  }\n  const signUpData = get(registrationSignUpData);\n  console.log({ signUpData });\n  if (!signUpData) {\n    return undefined;\n  }\n\n  const deployment = await getDeployments(signUpData.defaultUserNamespace);\n  return deployment;\n});\n","import React, { Suspense, useMemo } from 'react';\nimport { useDeployments } from '../../hooks/useDeployments';\nimport { useRegistrationContext } from '../../hooks/useRegistrationContext';\n\nconst ExperimentalPage = () => {\n  const deployments = useDeployments();\n  const [{ signupData }] = useRegistrationContext();\n  const launchUrl =\n    signupData?.consoleURL && signupData?.defaultUserNamespace\n      ? `${signupData.consoleURL}topology/ns/${signupData.defaultUserNamespace}?view=graph`\n      : signupData?.consoleURL;\n  const rows = useMemo(() => {\n    return (\n      deployments?.items.map((item) => {\n        return (\n          <tr key={item.metadata.uuid}>\n            <td>{item.metadata.name}</td>\n            <td>{item.metadata.creationTimestamp}</td>\n            {/* FIXME: What is type of application vs type of deployment */}\n            <td>{item.spec.template.metadata.labels.app}</td>\n            <td>{item.spec.template.metadata.labels.deployment}</td>\n            <td>\n              {item.status.conditions.find((condition) => condition.status === 'True')?.type ??\n                'Unknown'}\n            </td>\n            <td>{item.spec.replicas}</td>\n            <td>\n              <a target=\"_blank\" href={launchUrl} rel=\"noreferrer\">\n                Open\n              </a>\n            </td>\n          </tr>\n        );\n      }) ?? []\n    );\n  }, [deployments]);\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Created at</th>\n          <th>Application type</th>\n          <th>Deployment type</th>\n          <th>Status</th>\n          <th>Total replicas</th>\n          <th>Link</th>\n        </tr>\n      </thead>\n      <tbody>{rows}</tbody>\n    </table>\n  );\n};\n\nconst ExperimentalPageLoader = () => {\n  return (\n    <Suspense fallback=\"Loading deployments\">\n      <ExperimentalPage />\n    </Suspense>\n  );\n};\n\nexport default ExperimentalPageLoader;\n","import { useEffect } from 'react';\nimport { useAtomValue, useSetAtom } from 'jotai';\nimport useKubeApi from './useKubeApi';\nimport { useRegistrationContext } from './useRegistrationContext';\nimport { getDeploymentsAtom, loadDeploymentsAtom } from '../state/deploymentsAtom';\n\nexport const useDeployments = () => {\n  const [{ status }] = useRegistrationContext();\n  const { getDeployments } = useKubeApi();\n  const setDeployments = useSetAtom(getDeploymentsAtom);\n  const deployments = useAtomValue(loadDeploymentsAtom);\n  useEffect(() => {\n    if (status === 'ready' && getDeployments) {\n      setDeployments(() => getDeployments);\n    }\n  }, [getDeployments.toString(), status]);\n  return deployments;\n};\n"],"names":["useRegistrationContext","axiosInstance","useAxios","KUBE_API","getDeployments","namespace","url","projectDeploymentUrl","get","getDeploymentsAtom","undefined","loadDeploymentsAtom","signUpData","console","log","defaultUserNamespace","ExperimentalPage","deployments","status","setDeployments","useEffect","toString","useDeployments","signupData","launchUrl","consoleURL","rows","useMemo","items","map","item","key","metadata","uuid","name","creationTimestamp","spec","template","labels","app","deployment","conditions","find","condition","type","replicas","target","href","rel","Suspense","fallback"],"sourceRoot":""}